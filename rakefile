require 'bundler/setup'
require 'albacore'
require 'EhBuild/compile'
require 'EhBuild/drop'
require 'EhBuild/iis'
require 'EhBuild/clean'

@config = load_configuration

DROP_OPTIONS = {
	project: 'ApplicationManager',
	target: @config.target,
	deploy_servers: @config.deploy_servers,
    folders: %w{bin Content build Views Endpoints coverage},
    file_types: %w{
    dll exe spark asax ascx config pdf csv
    zip jpg gif css png txt js cer ico html xml
    xslt htc swf pfx pvk ttf svg woff eot json map
    cshtml
    },
    keep_folders: %w{logs}
}

task :default => ['paket:restore', 'npm_install', 'webpack', 'compile:all']
task :ci => ['clobber', 'paket:restore', 'npm_install', 'webpack', 'compile:version', 'compile:all', 'test:xunit', 'mochaci']
task :deploy => %w{drop:publish iis:deploy}
task :test => ['test:xunit', 'mocha', 'st:local']

Albacore.configure do |config|
  config.msbuild.command = "C:/Program Files (x86)/MSBuild/14.0/Bin/msbuild.exe"
end

## Install Javascript packages
task :npm_install do
	sh "npm install"
end

task :karma do
  sh "npm run karma"
end

task :mocha do
  sh "npm run mocha"
end

task :mochaci do
  sh "npm run mocha:ci"
end

## Xunit Test Runner
runner = './packages/xunit.runner.console/tools/xunit.console.exe'
testAssembly = './src/ApplicationManager.Tests/bin/Debug/ApplicationManager.Tests.dll ./src/ApplicationManager.Data.Tests/bin/Debug/ApplicationManager.Data.Tests.dll'
namespace :test do
  task :xunit do
    sh "#{runner} #{testAssembly}"
  end
end

task :webpack do
  command = case @config.target
    when "Release" then "webpack-p"
    else "webpack"
  end
  sh "npm run #{command}"
end

namespace :paket do

    def fileExists()
        unless File.exists? './.paket/paket.exe'
            Rake::Task['paket:bootstrap'].invoke
        end
    end

    task :bootstrap do
    	sh './.paket/paket.bootstrapper.exe'
    end

    task :install do
        fileExists()
    	sh './.paket/paket.exe install'
    end

    task :update do
    	fileExists()
    	sh './.paket/paket.exe update'
    end

    task :restore do
    	fileExists()
    	sh './.paket/paket.exe restore'
    end

    task :fixReferences do
        fileExists()
        sh './.paket/paket.exe install --hard'
    end
end

namespace :st do
  desc "Opens StoryTeller"
  task :open do
    sh `packages/StoryTeller/tools/ST.exe open src/ApplicationManager.StoryTeller`
  end

  desc "Runs the specified workspace (workspace=x)"
  task :local do
    workspace = ENV['workspace']
    sh "packages/Storyteller/tools/ST.exe run src/ApplicationManager.StoryTeller" +
        " --results-path st-results/index.htm"
  end
  
  desc "Runs the specified workspace (workspace=x) with the teamcity reporter"
  task :run do
    workspace = ENV['workspace']
    sh "packages/Storyteller/tools/ST.exe run src/ApplicationManager.StoryTeller" +
        " --results-path st-results/index.htm" +
        " --teamcity"
  end
end